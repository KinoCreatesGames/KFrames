/** ============================================================================
 *
 *  KTitle.js
 * 
 *  Build Date: 7/23/2021
 * 
 *  Made with LunaTea -- Haxe
 *
 * =============================================================================
*/
// Generated by Haxe 4.2.1+bf9ff69
/*:
@author  KinoCreates - Kino
@plugindesc > A plugin that creates a custom title scene <KTitle>.

@target MV MZ

@help
==== How To Use ====


MIT License
Copyright (c) 2021 KinoCreates
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

(function ($hx_exports, $global) {
  "use strict"
  $hx_exports["Tilemap"] = $hx_exports["Tilemap"] || {}
  var $estr = function () {
      return js_Boot.__string_rec(this, "");
    },
    $hxEnums = $hxEnums || {}
  class EReg {
    constructor(r, opt) {
      this.r = new RegExp(r, opt.split("u").join(""))
    }
    match(s) {
      if (this.r.global) {
        this.r.lastIndex = 0
      }
      this.r.m = this.r.exec(s)
      this.r.s = s
      return this.r.m != null;
    }
  }

  EReg.__name__ = true
  class Lambda {
    static exists(it, f) {
      let x = $getIterator(it)
      while (x.hasNext())
        if (f(x.next())) {
          return true;
        }
      return false;
    }
  }

  Lambda.__name__ = true
  Math.__name__ = true
  function core_Amaryllis_lerp(start, end, amount) {
    return start + (end - start) * amount;
  }
  function core_MathExt_lerp(start, end, amount) {
    return start + (end - start) * amount;
  }
  class haxe_ds_StringMap {
    constructor() {
      this.h = Object.create(null)
    }
  }

  haxe_ds_StringMap.__name__ = true
  class haxe_iterators_ArrayIterator {
    constructor(array) {
      this.current = 0
      this.array = array
    }
    hasNext() {
      return this.current < this.array.length;
    }
    next() {
      return this.array[this.current++];
    }
  }

  haxe_iterators_ArrayIterator.__name__ = true
  class js_Boot {
    static __string_rec(o, s) {
      if (o == null) {
        return "null";
      }
      if (s.length >= 5) {
        return "<...>";
      }
      let t = typeof o
      if (t == "function" && (o.__name__ || o.__ename__)) {
        t = "object"
      }
      switch (t) {
        case "function":
          return "<function>";
        case "object":
          if (o.__enum__) {
            let e = $hxEnums[o.__enum__]
            let con = e.__constructs__[o._hx_index]
            let n = con._hx_name
            if (con.__params__) {
              s = s + "\t"
              return (
                n +
                "(" +
                (function ($this) {
                  var $r
                  let _g = []
                  {
                    let _g1 = 0
                    let _g2 = con.__params__
                    while (true) {
                      if (!(_g1 < _g2.length)) {
                        break
                      }
                      let p = _g2[_g1]
                      _g1 = _g1 + 1
                      _g.push(js_Boot.__string_rec(o[p], s))
                    }
                  }
                  $r = _g
                  return $r;
                })(this).join(",") +
                ")"
              )
            } else {
              return n;
            }
          }
          if (o instanceof Array) {
            let str = "["
            s += "\t";
            let _g = 0
            let _g1 = o.length
            while (_g < _g1) {
              let i = _g++
              str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i], s);
            }
            str += "]";
            return str;
          }
          let tostr
          try {
            tostr = o.toString
          } catch (_g) {
            return "???";
          }
          if (
            tostr != null &&
            tostr != Object.toString &&
            typeof tostr == "function"
          ) {
            let s2 = o.toString()
            if (s2 != "[object Object]") {
              return s2;
            }
          }
          let str = "{\n"
          s += "\t";
          let hasp = o.hasOwnProperty != null
          let k = null
          for (k in o) {
            if (hasp && !o.hasOwnProperty(k)) {
              continue
            }
            if (
              k == "prototype" ||
              k == "__class__" ||
              k == "__super__" ||
              k == "__interfaces__" ||
              k == "__properties__"
            ) {
              continue
            }
            if (str.length != 2) {
              str += ", \n";
            }
            str += s + k + " : " + js_Boot.__string_rec(o[k], s);
          }
          s = s.substring(1)
          str += "\n" + s + "}";
          return str;
        case "string":
          return o;
        default:
          return String(o);
      }
    }
  }

  js_Boot.__name__ = true
  class kframes_KFrameSprite extends Sprite {
    constructor(bitmap, frameWidth, frameHeight) {
      if (frameHeight == null) {
        frameHeight = 48
      }
      if (frameWidth == null) {
        frameWidth = 48
      }
      super(bitmap);
      this.frameWidth = frameWidth
      this.frameHeight = frameHeight
      this.frameIndex = 0
      this.looping = false
      this.setFPS(6)
      this.animations = new haxe_ds_StringMap()
      if (this._frame != null) {
        this.setFrame(
          this._frame.x,
          this._frame.y,
          this.frameWidth,
          this.frameHeight
        )
      }
    }
    update() {
      super.update()
      this.updateTranslation()
      this.updateAnimationFrames()
    }
    updateTranslation() {
      if (this.destinationX != null || this.destinationY != null) {
        if (this.destinationX != this.x || this.destinationY != this.y) {
          this.x = core_Amaryllis_lerp(
            this.x,
            this.destinationX,
            this.translationAmount
          )
          this.y = core_Amaryllis_lerp(
            this.y,
            this.destinationY,
            this.translationAmount
          )
        }
      }
    }
    stopTranslation() {
      this.destinationX = null
      this.destinationY = null
    }
    updateAnimationFrames() {
      if (this.isPlaying) {
        if (this.frameWait <= 0) {
          this.frameWait = this.frameAmount
          if (this.animations != null) {
            let frames = this.animations.h[this.currentAnimName]
            if (this.frameIndex == frames.length && !this.looping) {
              this.isPlaying = false
            }
            this.frameIndex %= frames.length
            this.setCurrentFrame(frames[this.frameIndex])
            this.frameIndex++
          }
        } else {
          this.frameWait--
        }
      }
    }
    setCurrentFrame(frameNumber) {
      let columns = Math.floor(this.bitmap.width / this.frameWidth)
      this.setFrame(
        Math.min(
          Math.max(this.frameWidth * (frameNumber % columns), 0),
          3000000
        ),
        this.frameHeight * Math.floor(frameNumber / columns),
        this.frameWidth,
        this.frameHeight
      )
    }
    setFrameWidth(width) {
      this.frameWidth = width
      this.setFrame(
        this._frame.x,
        this._frame.y,
        this.frameWidth,
        this._frame.height
      )
      return this;
    }
    setFrameHeight(height) {
      this.frameHeight = height
      this.setFrame(
        this._frame.x,
        this._frame.y,
        this._frame.width,
        this.frameHeight
      )
      return this;
    }
    changeBitmap(bitmap) {
      this.bitmap = bitmap
      return this;
    }
    addAnimation(animationName, frames) {
      this.animations.h[animationName] = frames
      return this;
    }
    playAnimation(animationName, loop) {
      this.currentAnimName = animationName
      this.isPlaying = true
      this.looping = loop
      return this;
    }
    setFPS(fps) {
      this.frameSpeed = fps
      this.frameAmount = Math.ceil(60 / this.frameSpeed)
      this.frameWait = this.frameAmount
      return this;
    }
    translateTo(x, y, translationAmount) {
      this.destinationX = x
      this.destinationY = y
      this.translationAmount = translationAmount
      return this;
    }
    stop() {
      this.isPlaying = false
      this.looping = false
    }
  }

  kframes_KFrameSprite.__name__ = true
  class KCFrames {
    static main() {
      let _this = $plugins
      let _g = []
      let _g1 = 0
      while (_g1 < _this.length) {
        let v = _this[_g1]
        ++_g1
        if (new EReg("<KCFrames>", "ig").match(v.description)) {
          _g.push(v)
        }
      }
      KCFrames.Params = {}
    }
    static params() {
      return KCFrames.Params;
    }
    static createSprite(path, frameWidth, frameHeight) {
      if (frameHeight == null) {
        frameHeight = 48
      }
      if (frameWidth == null) {
        frameWidth = 48
      }
      return new kframes_KFrameSprite(
        ImageManager.loadPicture(path),
        frameWidth,
        frameHeight
      )
    }
    static addToScene(kframeSprite) {
      SceneManager._scene.addChild(kframeSprite)
      return kframeSprite;
    }
  }

  $hx_exports["KCFrames"] = KCFrames
  KCFrames.__name__ = true
  class KMsgBox extends PIXI.Graphics {
    constructor(x, y, width, height) {
      if (height == null) {
        height = 100
      }
      if (width == null) {
        width = 100
      }
      if (y == null) {
        y = 0
      }
      if (x == null) {
        x = 0
      }
      super();
      this.x = x
      this.y = y
      this.windowWidth = width
      this.windowHeight = height
      // Defaults to black 
      this.bgColor = 0
      // Defaults to white 
      this.borderColor = 16777215
      this.borderSize = 4
      this.bgAlpha = 1
      this.text = ""
      this.fontColor = 16777215
      this.fontSize = 16
      this.align = "left"
      this.cornerRadius = 10
      this.textTime = 5
      this.textTimer = this.textTime
      this.character = ""
      this.vowelFrameWait = 0
      this.pText = new PIXI.Text(this.text, {
        fontSize: this.fontSize,
        fill: this.fontColor,
        align: this.align,
        wordWrap: true,
        wordWrapWidth: width,
      })
      this.padding = 4
      this.pText.y = this.borderSize + this.padding
      this.pText.x = this.borderSize + this.padding
      this.pText.text = ""
      this.starIndicator = new PIXI.Graphics()
      let starPadding = this.padding + 20 + this.borderSize
      this.starIndicator.x = this.windowWidth - starPadding
      this.starIndicator.y = this.windowHeight - starPadding
      this.tilingBackground = new TilingSprite(
        new Bitmap(this.windowWidth, this.windowHeight)
      )
      this.tilingBackground.x = this.borderSize
      this.tilingBackground.y = this.borderSize
      this.addChild(this.tilingBackground)
      this.addChild(this.starIndicator)
      this.addChild(this.pText)
      this.drawMessageBox()
      this.emit("createWindow", this)
    }
    sendMsg(msg) {
      this.text = msg
      this.pText.text = ""
      this.starIndicator.visible = false
      this.emit("sendMsg", this, msg)
      this.character = ""
      this.previousVowel = null
    }
    sendMsgC(charName, msg) {
      this.sendMsg(msg)
      this.character = charName.toLowerCase()
    }
    drawMessageBox() {
      this.clear()
      this.drawBorder()
      this.drawBackground()
      this.drawTilingBackground()
      this.drawIndicatorStar()
    }
    drawBorder() {
      this.beginFill(this.borderColor, 1)
      this.drawRoundedRect(
        0,
        0,
        this.windowWidth,
        this.windowHeight,
        this.cornerRadius
      )
      this.endFill()
      return this;
    }
    drawBackground() {
      this.beginFill(this.bgColor, this.bgAlpha)
      this.drawRoundedRect(
        this.borderSize,
        this.borderSize,
        this.windowWidth - this.borderSize * 2,
        this.windowHeight - this.borderSize * 2,
        this.cornerRadius
      )
      this.endFill()
      return this;
    }
    drawTilingBackground() {
      let starGraphic = new PIXI.Graphics()
      starGraphic.beginFill(1710618, 0.75)
      let starCount = Math.floor(this.windowWidth / 20)
      let starRows = Math.floor(this.windowHeight / 20)
      let starSpacing = 20
      let _g = 1
      let _g1 = starCount
      while (_g < _g1) {
        let i = _g++
        let _g1 = 0
        let _g2 = starRows
        while (_g1 < _g2) {
          let y = _g1++
          starGraphic.drawStar(i * starSpacing, y * starSpacing, 5, 10, 5, 0)
        }
      }
      starGraphic.endFill()
      let renderer = Graphics.app.renderer
      let texture = renderer.generateTexture(
        starGraphic,
        PIXI.SCALE_MODES.DEFAULT,
        1
      )
      let canvas = renderer.extract.canvas(texture)
      let padding = 4
      texture.destroy(true)
      this.tilingBackground.bitmap = new Bitmap(
        this.windowWidth - (this.borderSize * 2 + padding),
        this.windowHeight - (this.borderSize * 2 + padding)
      )
      let bitmap = this.tilingBackground.bitmap
      bitmap.context.drawImage(canvas, 0, 0)
      bitmap.baseTexture.update()
      this.tilingBackground.move(
        this.borderSize * 2,
        this.borderSize * 2,
        bitmap.width,
        bitmap.height
      )
    }
    drawIndicatorStar() {
      this.starIndicator.clear()
      this.starIndicator.beginFill(16777215, 1)
      this.starIndicator.drawStar(0, 0, 5, 10, 5, 0)
      this.starIndicator.endFill()
      let starPadding = this.padding + 20 + this.borderSize
      this.starIndicator.x = this.windowWidth - starPadding
      this.starIndicator.y = this.windowHeight - starPadding
    }
    update() {
      this.updateTilingBackground()
      this.updateTextToRender()
    }
    updateTilingBackground() {
      this.tilingBackground.origin.y -= 0.64
      this.tilingBackground.origin.x += 0.64;
    }
    updateTextToRender() {
      if (this.textTimer <= 0) {
        this.textTimer = this.textTime
        this.pText.text = this.text.substring(0, this.pText.text.length + 1)
        if (this.character != null || this.character.length > 0) {
          this.sendVowelSound(
            this.pText.text.charAt(this.pText.text.length - 1)
          )
        }
      }
      if (this.text != this.pText.text) {
        this.textTimer--
      } else {
        if (!this.starIndicator.visible) {
          this.emit("endMsg")
        }
        this.starIndicator.visible = true
      }
    }
    sendVowelSound(character) {
      let _gthis = this
      let charVowel = character.toUpperCase()
      let baseAudioParams = {
        pitch: 100,
        pan: 0,
        pos: 0,
        volume: 40,
        name: "",
      }
      let _g = []
      let _g1 = 0
      let _g2 = ["A", "E", "I", "O", "U"]
      while (_g1 < _g2.length) {
        let v = _g2[_g1]
        ++_g1
        if (v != _gthis.previousVowel) {
          _g.push(v)
        }
      }
      let temp = _g
      let result = temp[Math.floor(temp.length * Math.random())]
      switch (result) {
        case "A":
          let vowel = KMsgBox.VOCAL_DIC.h[this.character].A
          baseAudioParams.name = "Vocals" + "/" + this.character + "/" + vowel
          break
        case "E":
          let vowel1 = KMsgBox.VOCAL_DIC.h[this.character].E
          baseAudioParams.name = "Vocals" + "/" + this.character + "/" + vowel1
          break
        case "I":
          let vowel2 = KMsgBox.VOCAL_DIC.h[this.character].I
          baseAudioParams.name = "Vocals" + "/" + this.character + "/" + vowel2
          break
        case "O":
          let vowel3 = KMsgBox.VOCAL_DIC.h[this.character].O
          baseAudioParams.name = "Vocals" + "/" + this.character + "/" + vowel3
          break
        case "U":
          let vowel4 = KMsgBox.VOCAL_DIC.h[this.character].U
          baseAudioParams.name = "Vocals" + "/" + this.character + "/" + vowel4
          break
      }

      let availableSe = Lambda.exists(AudioManager._seBuffers, function (se) {
        if (!se.isPlaying()) {
          return se.name == baseAudioParams.name;
        } else {
          return false;
        }
      })
      if (baseAudioParams.name.length > 0 && this.vowelFrameWait <= 0) {
        AudioManager.playSe(baseAudioParams)
        this.previousVowel = result
        this.vowelFrameWait = 1
      } else {
        this.vowelFrameWait--
      }
    }
    setBgColor(color) {
      this.bgColor = color
      this.drawMessageBox()
      return this;
    }
    setFontSize(size) {
      this.fontSize = size
      this.pText.style.fontSize = size
      return this;
    }
    setFontColor(color) {
      this.fontColor = color
      this.pText.style.fill = color
      return this;
    }
    move(x, y) {
      this.x = x != null ? x : this.x
      this.y = y != null ? y : this.y
      return this;
    }
    setXY(x, y) {
      this.x = x
      this.y = y
      return this;
    }
    setWindowWidth(width) {
      this.windowWidth = width
      this.pText.style.wordWrapWidth =
        this.windowWidth - (this.borderSize * 2 + this.padding)
      this.drawMessageBox()
      return this;
    }
    setWindowHeight(height) {
      this.windowHeight = height
      this.drawMessageBox()
      return this;
    }
    setDimensions(width, height) {
      this.windowWidth = width
      this.windowHeight = height
      this.pText.style.wordWrapWidth =
        this.windowWidth - (this.borderSize * 2 + this.padding)
      this.drawMessageBox()
      return this;
    }
    setBorderColor(color) {
      this.borderColor = color
      this.drawMessageBox()
      return this;
    }
    clear() {
      return super.clear();
    }
    hide() {
      this.visible = false
      this.emit("hideWindow", this)
      return this;
    }
    show() {
      this.visible = true
      this.emit("showWindow", this)
      return this;
    }
  }

  $hx_exports["KMsgBox"] = KMsgBox
  KMsgBox.__name__ = true
  class KMessage {
    static main() {
      let _this = $plugins
      let _g = []
      let _g1 = 0
      while (_g1 < _this.length) {
        let v = _this[_g1]
        ++_g1
        if (new EReg("<KMsg>", "ig").match(v.description)) {
          _g.push(v)
        }
      }
    }
    static createMessageBox(x, y, width, height) {
      return new KMsgBox(x, y, width, height);
    }
  }

  $hx_exports["KMessage"] = KMessage
  KMessage.__name__ = true
  class KCustomTitleScene extends Scene_Title {
    constructor() {
      super();
    }
    create() {
      _Scene_Title_create.call(this)
      this.setupParameters()
      this.createScrollingContainer()
      this.createMessageBox()
      this.createCharacter()
      this.createBalconyRailing()
      this.adjustChildren()
      this.setupCutscene()
    }
    setupParameters() {
      this.titleTimer = 150
      this.skipScroll = false
      this.skipScrollComplete = false
      this.yulaExitScreen = false
    }
    setupCutscene() {
      let padding = 20
      this.commandStepList = []
      let _gthis = this
      this.commandStepList.push({
        fn: function () {
          _gthis.msgBox.move(
            _gthis.yula.x +
              (_gthis.yula.width * _gthis.yula.scale.x) / 2 -
              _gthis.msgBox.windowWidth / 2,
            _gthis.yula.y - padding - _gthis.msgBox.height
          )
          _gthis.msgBox.show()
          _gthis.msgBox.sendMsgC(
            "yula",
            "Oh! it's the North stars! ...oh! ...I can't believe we can see the constellation of Orion here!"
          )
        },
        waitTime: 600,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.msgBox.sendMsgC("yula", "Ah...stars are aweso...!")
        },
        waitTime: 300,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.msgBox.x += 150;
          _gthis.msgBox.sendMsgC("dad", "Yula! It's 2AM, Go to sleep!")
        },
        waitTime: 300,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.yula.scale.x = 2
          _gthis.msgBox.move(
            _gthis.yula.x +
              (_gthis.yula.width * _gthis.yula.scale.x) / 2 -
              _gthis.msgBox.windowWidth / 2,
            _gthis.yula.y - padding - _gthis.msgBox.height
          )
          _gthis.msgBox.show()
          _gthis.msgBox.sendMsgC("yula", "Sorry daddy! I'm going to sleep!")
        },
        waitTime: 300,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.yula.scale.x = -2
          _gthis.msgBox.move(
            _gthis.yula.x +
              (_gthis.yula.width * _gthis.yula.scale.x) / 2 -
              _gthis.msgBox.windowWidth / 2,
            _gthis.yula.y - padding - _gthis.msgBox.height
          )
          _gthis.msgBox.show()
          _gthis.msgBox.sendMsgC(
            "yula",
            "Aww...if only my Dad shared the same excitement as me..."
          )
        },
        waitTime: 300,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.msgBox.sendMsgC(
            "yula",
            "He hasn't enjoyed looking at the stars since mom..."
          )
        },
        waitTime: 300,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.msgBox.sendMsgC(
            "yula",
            "Well whatever! Time to go to sleep before the old geezer gets angry!"
          )
        },
        waitTime: 480,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.msgBox.hide()
          _gthis.yula.scale.x = 2
          _gthis.yulaExitScreen = true
        },
        waitTime: 60,
      })
      this.commandStepList.push({
        fn: function () {
          _gthis.fadeOutAll()
          SceneManager.goto(Scene_Map)
        },
        waitTime: 30,
      })
    }
    adjustChildren() {
      this.addChild(this.customBackground)
      this.addChild(this.scrollingContainer)
      this.scrollingContainer.addChild(this.foregroundBalcony)
      this.scrollingContainer.addChild(this.yula)
      this.scrollingContainer.addChild(this.foregroundBalconyRailing)
      this.addChild(this.msgBox)
      this.addChild(this._gameTitleSprite)
      this.addChild(this._windowLayer)
    }
    createScrollingContainer() {
      this.scrollingContainer = new Sprite()
      this.scrollingContainer.y = 600
    }
    createMessageBox() {
      this.msgBox = KMessage.createMessageBox(0, 0, 200, 150)
      this.msgBox.pText.style.wordWrapWidth -= 12
      this.msgBox.setFontSize(18)
      this.msgBox.hide()
    }
    createCharacter() {
      this.yula = KCFrames.createSprite("Yula_Walk-Idle_51x103", 51, 103)
      this.yula.addAnimation("walk", [0, 1, 2, 3, 4, 5, 6, 7])
      this.yula.addAnimation("idle", [16, 17, 18, 19, 20, 21, 22, 23])
      this.yula.playAnimation("idle", true)
      this.yula.setFPS(10)
      this.yula.x = 528
      this.yula.y = 276
      this.yula.scale.y = 2
      this.yula.scale.x = -2
    }
    createBalconyRailing() {
      let bitmap = ImageManager.loadPicture("House_Balcony_Abv-Player_408x312")
      this.foregroundBalconyRailing = new Sprite()
      let _gthis = this
      bitmap.addLoadListener(function (loadedBitmap) {
        _gthis.foregroundBalconyRailing.bitmap = loadedBitmap
        _gthis.scaleSprite(_gthis.foregroundBalconyRailing)
      })
    }
    createBackground() {
      let bitmap = ImageManager.loadPicture("Night-Sky_BG")
      this.customBackground = new TilingSprite(
        new Bitmap(Graphics.width, Graphics.height)
      )
      let _gthis = this
      bitmap.addLoadListener(function (loadedBitmap) {
        _gthis.customBackground.bitmap = loadedBitmap
        _gthis.customBackground.move(
          0,
          0,
          loadedBitmap.width,
          loadedBitmap.height
        )
        _gthis.customBackground.y -= 80
        _gthis.customBackground.scale.y = 1.2
        _gthis.customBackground.scale.x = 1.2
      })
    }
    createForeground() {
      let bitmap = ImageManager.loadPicture("House_Balcony_408x312")
      this.foregroundBalcony = new Sprite()
      this._gameTitleSprite = new Sprite(
        new Bitmap(Graphics.width, Graphics.height)
      )
      let _gthis = this
      bitmap.addLoadListener(function (loadedBitmap) {
        _gthis.foregroundBalcony.bitmap = loadedBitmap
        _gthis.scaleSprite(_gthis.foregroundBalcony)
      })
      if ($dataSystem.optDrawTitle) {
        this.drawGameTitle()
      }
    }
    adjustBackground() {}
    update() {
      Scene_Base.prototype.update.call(this)
      this.updateTitleState()
      this.updateCustomBackground()
      if (this.clickNewGame) {
        this.updateIntroScene()
      }
    }
    updateIntroScene() {
      if (this.waitTime <= 0) {
        this.currentCommand = this.commandStepList.shift()
        if (this.currentCommand != null) {
          this.currentCommand.fn()
          this.waitTime = this.currentCommand.waitTime
        }
      } else {
        this.waitTime--
      }
    }
    updateTitleState() {
      if (
        (Input.isPressed("ok") ||
          Input.isPressed("cancel") ||
          TouchInput.isCancelled() ||
          TouchInput.isPressed()) &&
        !this.skipScroll
      ) {
        this.skipScroll = true
        this.startFadeOut(30, false)
      }
      if (
        this.skipScroll &&
        this._fadeDuration <= 0 &&
        !this.skipScrollComplete
      ) {
        this.scrollingContainer.y = 0
        this.startFadeIn(30, false)
        this.skipScrollComplete = true
        if (this.scrollingContainer.y == 0 && !this.clickNewGame) {
          this._commandWindow.visible = true
          this._commandWindow.open()
        }
      } else if (this.titleTimer <= 0) {
        if (this.scrollingContainer.y >= 0) {
          this.scrollingContainer.y = Math.min(
            Math.max(
              core_MathExt_lerp(this.scrollingContainer.y, -10, 0.0025),
              0
            ),
            600
          )
          let num = this.scrollingContainer.y
          if (num >= 0 && num <= 75) {
            this.scrollingContainer.y = Math.min(
              Math.max(
                core_MathExt_lerp(this.scrollingContainer.y, -100, 0.0025),
                0
              ),
              600
            )
          }
        }
        if (this.scrollingContainer.y == 0 && !this.clickNewGame) {
          this._commandWindow.visible = true
          this._commandWindow.open()
        }
      } else {
        this.titleTimer--
      }
    }
    updateCustomBackground() {
      this.customBackground.origin.x = (TouchInput.x - Graphics.width / 2) / 10
      this.customBackground.origin.y =
        (TouchInput.y - Graphics.height / 2) / 10
    }
    createCommandWindow() {
      const background = $dataSystem.titleCommandWindow.background
      const rect = this.commandWindowRect()
      this._commandWindow = new Window_TitleCommand(rect)
      this._commandWindow.makeCommandList = function () {
        this.addCommand(TextManager.newGame, "newGame")
        this.addCommand(TextManager.options, "options")
      }
      this._commandWindow.setBackgroundType(background)
      this._commandWindow.setHandler("newGame", this.commandNewGame.bind(this))
      this._commandWindow.setHandler("options", this.commandOptions.bind(this))
      this._commandWindow.contents.fontFace = "title-font"
      this._commandWindow.refresh()
      this._commandWindow.setBackgroundType(2)
      this._commandWindow.visible = false
      this.addWindow(this._commandWindow)
    }
    drawGameTitle() {
      let x = 20
      let y = Graphics.height / 4
      let maxWidth = Graphics.width - x * 2
      let text = $dataSystem.gameTitle
      let bitmap = this._gameTitleSprite.bitmap
      bitmap.fontFace = "title-font"
      bitmap.outlineColor = "black"
      bitmap.outlineWidth = 8
      bitmap.fontSize = 72
      bitmap.drawText(text, x, y, maxWidth, 48, "center")
    }
    commandNewGame() {
      DataManager.setupNewGame()
      this._commandWindow.close()
      this.clickNewGame = true
      this._gameTitleSprite.visible = false
    }
    terminate() {
      Scene_Base.prototype.terminate.call(this)
      SceneManager.snapForBackground()
    }
  }

  $hx_exports["KcustomTitleScene"] = KCustomTitleScene
  KCustomTitleScene.__name__ = true
  class KTitle {
    static main() {
      let _g = []
      let _g1 = 0
      let _g2 = $plugins
      while (_g1 < _g2.length) {
        let v = _g2[_g1]
        ++_g1
        if (new EReg("<KTitle>", "ig").match(v.description)) {
          _g.push(v)
        }
      }
      let plugin = _g[0]
      let _Scene_Title_yula = Scene_Title.prototype.yula
      Scene_Title.prototype.yula = null
      let _Scene_Title_customBackground =
        Scene_Title.prototype.customBackground
      Scene_Title.prototype.customBackground = null
      let _Scene_Title_foregroundBalcony =
        Scene_Title.prototype.foregroundBalcony
      Scene_Title.prototype.foregroundBalcony = null
      let _Scene_Title_foregroundBalconyRailing =
        Scene_Title.prototype.foregroundBalconyRailing
      Scene_Title.prototype.foregroundBalconyRailing = null
      let _Scene_Title_scrollingContainer =
        Scene_Title.prototype.scrollingContainer
      Scene_Title.prototype.scrollingContainer = null
      let _Scene_Title_titleTimer = Scene_Title.prototype.titleTimer
      Scene_Title.prototype.titleTimer = null
      let _Scene_Title_skipScroll = Scene_Title.prototype.skipScroll
      Scene_Title.prototype.skipScroll = null
      let _Scene_Title_skipScrollComplete =
        Scene_Title.prototype.skipScrollComplete
      Scene_Title.prototype.skipScrollComplete = null
      let _Scene_Title_clickNewGame = Scene_Title.prototype.clickNewGame
      Scene_Title.prototype.clickNewGame = null
      let _Scene_Title_yulaExitScreen = Scene_Title.prototype.yulaExitScreen
      Scene_Title.prototype.yulaExitScreen = null
      let _Scene_Title_waitTime = Scene_Title.prototype.waitTime
      Scene_Title.prototype.waitTime = null
      let _Scene_Title_msgBox = Scene_Title.prototype.msgBox
      Scene_Title.prototype.msgBox = null
      let _Scene_Title_commandStepList = Scene_Title.prototype.commandStepList
      Scene_Title.prototype.commandStepList = null
      let _Scene_Title_currentCommand = Scene_Title.prototype.currentCommand
      Scene_Title.prototype.currentCommand = null
      let _Scene_Title_create = Scene_Title.prototype.create
      Scene_Title.prototype.create = function () {
        _Scene_Title_create.call(this)
        this.setupParameters()
        this.createScrollingContainer()
        this.createMessageBox()
        this.createCharacter()
        this.createBalconyRailing()
        this.adjustChildren()
        this.setupCutscene()
      }
      let _Scene_Title_setupParameters = Scene_Title.prototype.setupParameters
      Scene_Title.prototype.setupParameters = function () {
        this.titleTimer = 150
        this.skipScroll = false
        this.skipScrollComplete = false
        this.yulaExitScreen = false
      }
      let _Scene_Title_setupCutscene = Scene_Title.prototype.setupCutscene
      Scene_Title.prototype.setupCutscene = function () {
        let padding = 20
        this.commandStepList = []
        let defaultWait = 300
        let _gthis = this
        this.commandStepList.push({
          fn: function () {
            let scaleX = _gthis.yula.scale.x
            let scaleY = _gthis.yula.scale.y
            let x =
              _gthis.yula.x +
              (_gthis.yula.width * scaleX) / 2 -
              _gthis.msgBox.windowWidth / 2
            let y = _gthis.yula.y - padding - _gthis.msgBox.height
            _gthis.msgBox.move(x, y)
            _gthis.msgBox.show()
            let text =
              "Oh! it's the North stars! ...oh! ...I can't believe we can see the constellation of Orion here!"
            _gthis.msgBox.sendMsgC("yula", text)
          },
          waitTime: defaultWait * 2,
        })
        this.commandStepList.push({
          fn: function () {
            let text = "Ah...stars are aweso...!"
            _gthis.msgBox.sendMsgC("yula", text)
          },
          waitTime: defaultWait,
        })
        this.commandStepList.push({
          fn: function () {
            _gthis.msgBox.x += 150;
            let text = "Yula! It's 2AM, Go to sleep!"
            _gthis.msgBox.sendMsgC("dad", text)
          },
          waitTime: defaultWait,
        })
        this.commandStepList.push({
          fn: function () {
            _gthis.yula.scale.x = 2
            let scaleX = _gthis.yula.scale.x
            let scaleY = _gthis.yula.scale.y
            let x =
              _gthis.yula.x +
              (_gthis.yula.width * scaleX) / 2 -
              _gthis.msgBox.windowWidth / 2
            let y = _gthis.yula.y - padding - _gthis.msgBox.height
            _gthis.msgBox.move(x, y)
            _gthis.msgBox.show()
            let text = "Sorry daddy! I'm going to sleep!"
            _gthis.msgBox.sendMsgC("yula", text)
          },
          waitTime: defaultWait,
        })
        this.commandStepList.push({
          fn: function () {
            _gthis.yula.scale.x = -2
            let scaleX = _gthis.yula.scale.x
            let scaleY = _gthis.yula.scale.y
            let x =
              _gthis.yula.x +
              (_gthis.yula.width * scaleX) / 2 -
              _gthis.msgBox.windowWidth / 2
            let y = _gthis.yula.y - padding - _gthis.msgBox.height
            _gthis.msgBox.move(x, y)
            _gthis.msgBox.show()
            let text =
              "Aww...if only my Dad shared the same excitement as me..."
            _gthis.msgBox.sendMsgC("yula", text)
          },
          waitTime: defaultWait,
        })
        this.commandStepList.push({
          fn: function () {
            let text = "He hasn't enjoyed looking at the stars since mom..."
            _gthis.msgBox.sendMsgC("yula", text)
          },
          waitTime: defaultWait,
        })
        this.commandStepList.push({
          fn: function () {
            let text =
              "Well whatever! Time to go to sleep before the old geezer gets angry!"
            _gthis.msgBox.sendMsgC("yula", text)
          },
          waitTime: defaultWait + 180,
        })
        this.commandStepList.push({
          fn: function () {
            _gthis.msgBox.hide()
            _gthis.yula.scale.x = 2
            _gthis.yulaExitScreen = true
          },
          waitTime: 60,
        })
        this.commandStepList.push({
          fn: function () {
            _gthis.fadeOutAll()
            SceneManager.goto(Scene_Map)
          },
          waitTime: 30,
        })
      }
      let _Scene_Title_adjustChildren = Scene_Title.prototype.adjustChildren
      Scene_Title.prototype.adjustChildren = function () {
        this.addChild(this.customBackground)
        this.addChild(this.scrollingContainer)
        this.scrollingContainer.addChild(this.foregroundBalcony)
        this.scrollingContainer.addChild(this.yula)
        this.scrollingContainer.addChild(this.foregroundBalconyRailing)
        this.addChild(this.msgBox)
        this.addChild(this._gameTitleSprite)
        this.addChild(this._windowLayer)
      }
      let _Scene_Title_createScrollingContainer =
        Scene_Title.prototype.createScrollingContainer
      Scene_Title.prototype.createScrollingContainer = function () {
        this.scrollingContainer = new Sprite()
        this.scrollingContainer.y = 600
      }
      let _Scene_Title_createMessageBox =
        Scene_Title.prototype.createMessageBox
      Scene_Title.prototype.createMessageBox = function () {
        this.msgBox = KMessage.createMessageBox(0, 0, 200, 150)
        this.msgBox.pText.style.wordWrapWidth -= 12
        this.msgBox.setFontSize(18)
        this.msgBox.hide()
      }
      let _Scene_Title_createCharacter = Scene_Title.prototype.createCharacter
      Scene_Title.prototype.createCharacter = function () {
        this.yula = KCFrames.createSprite("Yula_Walk-Idle_51x103", 51, 103)
        this.yula.addAnimation("walk", [0, 1, 2, 3, 4, 5, 6, 7])
        this.yula.addAnimation("idle", [16, 17, 18, 19, 20, 21, 22, 23])
        this.yula.playAnimation("idle", true)
        this.yula.setFPS(10)
        this.yula.x = 528
        this.yula.y = 276
        this.yula.scale.y = 2
        this.yula.scale.x = -2
      }
      let _Scene_Title_createBalconyRailing =
        Scene_Title.prototype.createBalconyRailing
      Scene_Title.prototype.createBalconyRailing = function () {
        let bitmap = ImageManager.loadPicture(
          "House_Balcony_Abv-Player_408x312"
        )
        this.foregroundBalconyRailing = new Sprite()
        let _gthis = this
        bitmap.addLoadListener(function (loadedBitmap) {
          _gthis.foregroundBalconyRailing.bitmap = loadedBitmap
          _gthis.scaleSprite(_gthis.foregroundBalconyRailing)
        })
      }
      let _Scene_Title_createBackground =
        Scene_Title.prototype.createBackground
      Scene_Title.prototype.createBackground = function () {
        let bitmap = ImageManager.loadPicture("Night-Sky_BG")
        this.customBackground = new TilingSprite(
          new Bitmap(Graphics.width, Graphics.height)
        )
        let _gthis = this
        bitmap.addLoadListener(function (loadedBitmap) {
          _gthis.customBackground.bitmap = loadedBitmap
          _gthis.customBackground.move(
            0,
            0,
            loadedBitmap.width,
            loadedBitmap.height
          )
          _gthis.customBackground.y -= 80
          _gthis.customBackground.scale.y = 1.2
          _gthis.customBackground.scale.x = 1.2
        })
      }
      let _Scene_Title_createForeground =
        Scene_Title.prototype.createForeground
      Scene_Title.prototype.createForeground = function () {
        let bitmap = ImageManager.loadPicture("House_Balcony_408x312")
        this.foregroundBalcony = new Sprite()
        this._gameTitleSprite = new Sprite(
          new Bitmap(Graphics.width, Graphics.height)
        )
        let _gthis = this
        bitmap.addLoadListener(function (loadedBitmap) {
          _gthis.foregroundBalcony.bitmap = loadedBitmap
          _gthis.scaleSprite(_gthis.foregroundBalcony)
        })
        if ($dataSystem.optDrawTitle) {
          this.drawGameTitle()
        }
      }
      let _Scene_Title_adjustBackground =
        Scene_Title.prototype.adjustBackground
      Scene_Title.prototype.adjustBackground = function () {}
      let _Scene_Title_update = Scene_Title.prototype.update
      Scene_Title.prototype.update = function () {
        Scene_Base.prototype.update.call(this)
        this.updateTitleState()
        this.updateCustomBackground()
        if (this.clickNewGame) {
          this.updateIntroScene()
        }
      }
      let _Scene_Title_updateIntroScene =
        Scene_Title.prototype.updateIntroScene
      Scene_Title.prototype.updateIntroScene = function () {
        if (this.waitTime <= 0) {
          this.currentCommand = this.commandStepList.shift()
          if (this.currentCommand != null) {
            this.currentCommand.fn()
            this.waitTime = this.currentCommand.waitTime
          }
        } else {
          this.waitTime--
        }
      }
      let _Scene_Title_updateTitleState =
        Scene_Title.prototype.updateTitleState
      Scene_Title.prototype.updateTitleState = function () {
        let buttonClicked =
          Input.isPressed("ok") ||
          Input.isPressed("cancel") ||
          TouchInput.isCancelled() ||
          TouchInput.isPressed()
        if (buttonClicked && !this.skipScroll) {
          this.skipScroll = true
          this.startFadeOut(30, false)
        }
        if (
          this.skipScroll &&
          this._fadeDuration <= 0 &&
          !this.skipScrollComplete
        ) {
          this.scrollingContainer.y = 0
          this.startFadeIn(30, false)
          this.skipScrollComplete = true
          if (this.scrollingContainer.y == 0 && !this.clickNewGame) {
            this._commandWindow.visible = true
            this._commandWindow.open()
          }
        } else if (this.titleTimer <= 0) {
          if (this.scrollingContainer.y >= 0) {
            this.scrollingContainer.y = Math.min(
              Math.max(
                core_MathExt_lerp(this.scrollingContainer.y, -10, 0.0025),
                0
              ),
              600
            )
            let num = this.scrollingContainer.y
            if (num >= 0 && num <= 75) {
              this.scrollingContainer.y = Math.min(
                Math.max(
                  core_MathExt_lerp(this.scrollingContainer.y, -100, 0.0025),
                  0
                ),
                600
              )
            }
          }
          if (this.scrollingContainer.y == 0 && !this.clickNewGame) {
            this._commandWindow.visible = true
            this._commandWindow.open()
          }
        } else {
          this.titleTimer--
        }
      }
      let _Scene_Title_updateCustomBackground =
        Scene_Title.prototype.updateCustomBackground
      Scene_Title.prototype.updateCustomBackground = function () {
        let offsetFromCenterX = TouchInput.x - Graphics.width / 2
        let offsetFromCenterY = TouchInput.y - Graphics.height / 2
        let movementScaleX = offsetFromCenterX / 10
        let movementScaleY = offsetFromCenterY / 10
        this.customBackground.origin.x = movementScaleX
        this.customBackground.origin.y = movementScaleY
      }
      let _Scene_Title_createCommandWindow =
        Scene_Title.prototype.createCommandWindow
      Scene_Title.prototype.createCommandWindow = function () {
        const background = $dataSystem.titleCommandWindow.background
        const rect = this.commandWindowRect()
        this._commandWindow = new Window_TitleCommand(rect)
        this._commandWindow.makeCommandList = function () {
          this.addCommand(TextManager.newGame, "newGame")
          this.addCommand(TextManager.options, "options")
        }
        this._commandWindow.setBackgroundType(background)
        this._commandWindow.setHandler(
          "newGame",
          this.commandNewGame.bind(this)
        )
        this._commandWindow.setHandler(
          "options",
          this.commandOptions.bind(this)
        )
        this._commandWindow.contents.fontFace = "title-font"
        this._commandWindow.refresh()
        this._commandWindow.setBackgroundType(2)
        this._commandWindow.visible = false
        this.addWindow(this._commandWindow)
      }
      let _Scene_Title_drawGameTitle = Scene_Title.prototype.drawGameTitle
      Scene_Title.prototype.drawGameTitle = function () {
        let x = 20
        let y = Graphics.height / 4
        let maxWidth = Graphics.width - x * 2
        let text = $dataSystem.gameTitle
        let bitmap = this._gameTitleSprite.bitmap
        bitmap.fontFace = "title-font"
        bitmap.outlineColor = "black"
        bitmap.outlineWidth = 8
        bitmap.fontSize = 72
        bitmap.drawText(text, x, y, maxWidth, 48, "center")
      }
      let _Scene_Title_commandNewGame = Scene_Title.prototype.commandNewGame
      Scene_Title.prototype.commandNewGame = function () {
        DataManager.setupNewGame()
        this._commandWindow.close()
        this.clickNewGame = true
        this._gameTitleSprite.visible = false
      }
      let _Scene_Title_terminate = Scene_Title.prototype.terminate
      Scene_Title.prototype.terminate = function () {
        Scene_Base.prototype.terminate.call(this)
        SceneManager.snapForBackground()
      }
    }
  }

  $hx_exports["KTitle"] = KTitle
  KTitle.__name__ = true

  function $getIterator(o) {
    if (o instanceof Array) return new haxe_iterators_ArrayIterator(o);
    else return o.iterator();
  }
  {
    String.__name__ = true
    Array.__name__ = true
  }
  js_Boot.__toStr = {}.toString
  KCFrames.listener = new PIXI.utils.EventEmitter()
  KCFrames.KFrameSprite = kframes_KFrameSprite
  KMsgBox.VOCAL_PATH = "Vocals"
  KMsgBox.VOCAL_DIC = (function ($this) {
    var $r
    let _g = new haxe_ds_StringMap()
    _g.h["haley"] = {
      A: "JDSherbert - Vocals - [Stargazer] Haley A",
      I: "JDSherbert - Vocals - [Stargazer] Haley I",
      E: "JDSherbert - Vocals - [Stargazer] Haley E",
      O: "JDSherbert - Vocals - [Stargazer] Haley O",
      U: "JDSherbert - Vocals - [Stargazer] Haley U",
    }
    _g.h["dad"] = {
      A: "JDSherbert - Vocals - [Stargazer] Dad A",
      I: "JDSherbert - Vocals - [Stargazer] Dad I",
      E: "JDSherbert - Vocals - [Stargazer] Dad E",
      O: "JDSherbert - Vocals - [Stargazer] Dad O",
      U: "JDSherbert - Vocals - [Stargazer] Dad U",
    }
    _g.h["yula"] = {
      A: "JDSherbert - Vocals - [Stargazer] Yula A",
      E: "JDSherbert - Vocals - [Stargazer] Yula E",
      I: "JDSherbert - Vocals - [Stargazer] Yula I",
      O: "JDSherbert - Vocals - [Stargazer] Yula O",
      U: "JDSherbert - Vocals - [Stargazer] Yula U",
    }
    _g.h["spacemom"] = {
      A: "JDSherbert - Vocals - [Stargazer] SpaceMom A",
      E: "JDSherbert - Vocals - [Stargazer] SpaceMom E",
      I: "JDSherbert - Vocals - [Stargazer] SpaceMom I",
      O: "JDSherbert - Vocals - [Stargazer] SpaceMom O",
      U: "JDSherbert - Vocals - [Stargazer] SpaceMom U",
    }
    _g.h["basic"] = {
      A: "JDSherbert - Vocals - [Stargazer] Basic Female A",
      E: "JDSherbert - Vocals - [Stargazer] Basic Female E",
      I: "JDSherbert - Vocals - [Stargazer] Basic Female I",
      O: "JDSherbert - Vocals - [Stargazer] Basic Female O",
      U: "JDSherbert - Vocals - [Stargazer] Basic Female U",
    }
    $r = _g
    return $r;
  })(this)
  KMsgBox.STAR_RADIUS = 10
  KMsgBox.TEXT_FRAMETIME = 5
  KMsgBox.VOWEL_WAIT = 1
  KTitle.main()
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this,
  {}
)
