/** ============================================================================
 *
 *  KInterpreterMV.js
 * 
 *  Build Date: 7/23/2021
 * 
 *  Made with LunaTea -- Haxe
 *
 * =============================================================================
*/
// Generated by Haxe 4.2.1+bf9ff69
/*:
@author  KinoCreates - Kino
@plugindesc >  Creates an interpreter for creating cutscenes simply <KInterpreter>.

@target MV MZ

@help
==== How To Use ====


MIT License
Copyright (c) 2021 KinoCreates
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

(function ($hx_exports, $global) {
  "use strict"
  class EReg {
    constructor(r, opt) {
      this.r = new RegExp(r, opt.split("u").join(""))
    }
    match(s) {
      if (this.r.global) {
        this.r.lastIndex = 0
      }
      this.r.m = this.r.exec(s)
      this.r.s = s
      return this.r.m != null;
    }
  }

  class KInterpreter {
    constructor(commands) {
      this.commands = commands
      this.waitTime = 0
      this.playerInput = false
    }
    addCommand(command) {
      this.commands.push(command)
    }
    removeCommand(index) {
      this.commands.splice(index, 1)
    }
    update() {
      let playerCommands =
        Input.isTriggered("ok") ||
        Input.isTriggered("cancel") ||
        TouchInput.isPressed()
      if (this.waitTime <= 0 && !this.playerInput) {
        this.advanceCommand()
        if (this.currentCommand != null) {
          this.currentCommand.fn()
          this.waitTime = this.currentCommand.wait
          this.playerInput = this.currentCommand.playerInput
        }
      }
      if (this.playerInput && playerCommands) {
        this.advanceCommand()
      }
    }
    advanceCommand() {
      this.currentCommand = this.commands.shift()
    }
  }

  $hx_exports["KInterpreter"] = KInterpreter
  class KCustomIntepreter {
    static main() {
      let _this = $plugins
      let _g = []
      let _g1 = 0
      while (_g1 < _this.length) {
        let v = _this[_g1]
        ++_g1
        if (new EReg("<KInterpreter>", "ig").match(v.description)) {
          _g.push(v)
        }
      }
    }
    static createInterpreter() {
      return new KInterpreter([]);
    }
  }

  $hx_exports["KCustomInterpreter"] = KCustomIntepreter

  {
  }
  KCustomIntepreter.listener = new PIXI.utils.EventEmitter()
  KCustomIntepreter.main()
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this,
  {}
)
